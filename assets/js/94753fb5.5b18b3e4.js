"use strict";(self.webpackChunkmonogame_extended_website=self.webpackChunkmonogame_extended_website||[]).push([[5224],{2151:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var s=t(4848),d=t(8453);const i={id:"input",title:"Input",sidebar_label:"Input"},o=void 0,r={id:"archived/input/input",title:"Input",description:"The MonoGame.Extended.Input provides extensions on top of the normal input classes.",source:"@site/docs/archived/input/input.md",sourceDirName:"archived/input",slug:"/archived/input/",permalink:"/docs/archived/input/",draft:!1,unlisted:!1,editUrl:"https://github.com/craftworkgames/craftworkgames.github.io/tree/develop/docs/archived/input/input.md",tags:[],version:"current",frontMatter:{id:"input",title:"Input",sidebar_label:"Input"}},a={},c=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"MouseExtended",id:"mouseextended",level:3},{value:"KeyboardExtended",id:"keyboardextended",level:3},{value:"InputListeners",id:"inputlisteners",level:2},{value:"Usage",id:"usage-1",level:3}];function u(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"MonoGame.Extended.Input"})," provides extensions on top of the normal input classes."]}),"\n",(0,s.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://www.nuget.org/packages/MonoGame.Extended.Input",children:"MonoGame.Extended.Input"})," is distributed via a NuGet package. You can add the NuGet package to your C# project through your IDE of choice (Visual Studio, Xamarin Studio, Rider, etc) or through the Command Line Interface (CLI) using the dotnet command."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"dotnet add MonoGame.Extended.Input\n"})}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.h3,{id:"mouseextended",children:"MouseExtended"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"MouseExtended"})," is an extension of the ",(0,s.jsx)(n.code,{children:"Mouse"})," class. The ",(0,s.jsx)(n.code,{children:"MouseStateExtended"})," struct, obtained with ",(0,s.jsx)(n.code,{children:"MouseExtended.GetState()"})," provides useful utilities such as ",(0,s.jsx)(n.code,{children:"WasButtonJustDown()"})," and ",(0,s.jsx)(n.code,{children:"WasButtonJustUp()"})," by keeping track of the previous ",(0,s.jsx)(n.code,{children:"MouseState"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"keyboardextended",children:"KeyboardExtended"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"KeyboardExtended"})," is an extension of the ",(0,s.jsx)(n.code,{children:"Keyboard"})," class. The ",(0,s.jsx)(n.code,{children:"KeyboardStateExtended"})," struct, obtained with ",(0,s.jsx)(n.code,{children:"KeyboardExtended.GetState()"})," provides useful utilities such as ",(0,s.jsx)(n.code,{children:"WasAnyKeyJustDown()"}),", ",(0,s.jsx)(n.code,{children:"WasKeyJustDown()"})," and ",(0,s.jsx)(n.code,{children:"WasKeyJustUp()"})," by keeping track of the previous ",(0,s.jsx)(n.code,{children:"KeyboardState"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"inputlisteners",children:"InputListeners"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Listener"})," classes have events you can use to subscribe to input events, instead of having to poll for input changes."]}),"\n",(0,s.jsx)(n.h3,{id:"usage-1",children:"Usage"}),"\n",(0,s.jsx)(n.p,{children:"We start by including the required namespace."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:"using MonoGame.Extended.Input.InputListeners;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Next, we declare our ",(0,s.jsx)(n.code,{children:"InputListener"})," fields"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:"private readonly TouchListener _touchListener;\nprivate readonly GamePadListener _gamePadListener;\nprivate readonly KeyboardListener _keyboardListener;\nprivate readonly MouseListener _mouseListener;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can manually call the ",(0,s.jsx)(n.code,{children:"Update"})," method of the ",(0,s.jsx)(n.code,{children:"Listeners"}),", but you can also use ",(0,s.jsx)(n.code,{children:"InputListenerComponent"})," this this."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:"_keyboardListener = new KeyboardListener();\n_gamePadListener = new GamePadListener();\n_mouseListener = new MouseListener();\n_touchListener = new TouchListener();\n\nComponents.Add(new InputListenerComponent(this, _keyboardListener, _gamePadListener, _mouseListener, _touchListener));\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Finaly, we subscribe to the events of the ",(0,s.jsx)(n.code,{children:"InputListeners"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:'_mouseListener.MouseClicked += (sender, args) => { Window.Title = $"Mouse {args.Button} Clicked"; };\n_keyboardListener.KeyPressed += (sender, args) => { Window.Title = $"Key {args.Key} Pressed"; };\n_gamePadListener.ButtonDown +=  (sender, args) => { Window.Title = $"Key {args.Button} Down"; };\n_touchListener.TouchStarted +=  (sender, args) => { Window.Title = $"Touched"; };\n'})})]})}function l(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var s=t(6540);const d={},i=s.createContext(d);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);