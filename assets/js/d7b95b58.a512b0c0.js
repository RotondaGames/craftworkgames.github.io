"use strict";(self.webpackChunkmonogame_extended_website=self.webpackChunkmonogame_extended_website||[]).push([[397],{4754:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var i=t(4848),a=t(8453);const o={id:"animations",title:"Animations",sidebar_label:"Animations"},s=void 0,r={id:"features/animations/animations",title:"Animations",description:"The MonoGame.Extended.Animations library contains classes useful for animating 2D sprite.",source:"@site/docs/features/animations/animations.md",sourceDirName:"features/animations",slug:"/features/animations/",permalink:"/docs/features/animations/",draft:!1,unlisted:!1,editUrl:"https://github.com/craftworkgames/craftworkgames.github.io/tree/develop/docs/features/animations/animations.md",tags:[],version:"current",frontMatter:{id:"animations",title:"Animations",sidebar_label:"Animations"},sidebar:"docs",previous:{title:"Cameras",permalink:"/docs/features/cameras/"},next:{title:"Collision",permalink:"/docs/features/collision/"}},d={},c=[{value:"Installation",id:"installation",level:2},{value:"Setup SpriteFactory",id:"setup-spritefactory",level:2},{value:"Usage",id:"usage",level:2},{value:"Creating the Animation",id:"creating-the-animation",level:3},{value:"ContentPipeline",id:"contentpipeline",level:3},{value:"Loading the Animation",id:"loading-the-animation",level:3},{value:"Updating the Animation",id:"updating-the-animation",level:3},{value:"Drawing the final result",id:"drawing-the-final-result",level:3},{value:"Result",id:"result",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"The MonoGame.Extended.Animations library contains classes useful for animating 2D sprite."}),"\n",(0,i.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://www.nuget.org/packages/MonoGame.Extended.Animations",children:"MonoGame.Extended.Animations"})," is distributed via a NuGet package. You can add the NuGet package to your C# project through your IDE of choice (Visual Studio, Xamarin Studio, Rider, etc) or through the Command Line Interface (CLI) using the dotnet command."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"dotnet add MonoGame.Extended.Animations\n"})}),"\n",(0,i.jsx)(n.h2,{id:"setup-spritefactory",children:"Setup SpriteFactory"}),"\n",(0,i.jsx)(n.p,{children:"In this example we use SpriteFactory for animating Sprites.\nwe are going to build it ourselves from the source."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Step 1 clone the SpriteFactory repository"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"git clone https://github.com/craftworkgames/SpriteFactory.git"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Step 2 Build and run"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"cd SpriteFactory"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"dotnet run --project SpriteFactory"})}),"\n",(0,i.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(n.h3,{id:"creating-the-animation",children:"Creating the Animation"}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["The assets used in this example can be downloaded ",(0,i.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:t(6407).A+"",children:"here"})]})}),"\n",(0,i.jsxs)(n.p,{children:["Before we can load an animation, we must first animate it in SpriteFactory.\nWe are using the ",(0,i.jsx)(n.code,{children:"mowt.png"})," from the assets"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Step 1"}),"\nCreate new project in ",(0,i.jsx)(n.code,{children:"File -> New"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Step 2"}),"\nOpen mowt.png in ",(0,i.jsx)(n.code,{children:"Texture"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Step 3"}),"\nSet Tile Size to 52 by 72 pixels"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Step 4"}),"\nAdd your animations and configure your prefered Frame duration"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Spritefactory",src:t(1489).A+"",width:"1247",height:"875"})}),"\n",(0,i.jsxs)(n.p,{children:["Next we save our animation as ",(0,i.jsx)(n.code,{children:"mowt.sf"})]}),"\n",(0,i.jsx)(n.h3,{id:"contentpipeline",children:"ContentPipeline"}),"\n",(0,i.jsxs)(n.p,{children:["SpriteFactory animation does not have to be imported with the ContentPipeline\nBut we de need to tell the compiler to copy ",(0,i.jsx)(n.code,{children:"mowt.sf"})," to the output folder.\nIn visual studio you can do that by clicking on ",(0,i.jsx)(n.code,{children:"mowt.sf"})," in the Solution Explorer and setting  ",(0,i.jsx)(n.code,{children:"Copy to Output Directorty"})," to ",(0,i.jsx)(n.code,{children:"Copy if newer"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"VisualStudio",src:t(4395).A+"",width:"341",height:"349"})}),"\n",(0,i.jsxs)(n.p,{children:["You can also set this in your ",(0,i.jsx)(n.code,{children:"project.csproj"})," by adding the following"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<ItemGroup>\n    <None Update="Content\\motw.sf">\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n    </None>\n</ItemGroup>\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"motw.png"})," can just be imported as Texture2D."]}),"\n",(0,i.jsx)(n.h3,{id:"loading-the-animation",children:"Loading the Animation"}),"\n",(0,i.jsx)(n.p,{children:"We start by defining our fields"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"private AnimatedSprite _motwSprite;\nprivate Vector2 _motwPosition;\n"})}),"\n",(0,i.jsx)(n.p,{children:"Next we load the content"}),"\n",(0,i.jsxs)(n.p,{children:["To use ",(0,i.jsx)(n.code,{children:"new JsonContentLoader()"})," you need to use the ",(0,i.jsx)(n.code,{children:"Content.Load extension"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",children:"using MonoGame.Extended.Content;\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'protected override void LoadContent()\n{\n    _spriteBatch = new SpriteBatch(GraphicsDevice);\n    var spriteSheet = Content.Load<SpriteSheet>("motw.sf", new JsonContentLoader());\n    var sprite = new AnimatedSprite(spriteSheet);\n    \n    sprite.Play("idle");\n    _motwPosition = new Vector2(100, 100);\n    _motwSprite = sprite;\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"updating-the-animation",children:"Updating the Animation"}),"\n",(0,i.jsx)(n.p,{children:"We use the following code to update the Position and Animation of the Player."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'protected override void Update(GameTime gameTime)\n{\n    var deltaSeconds = (float)gameTime.ElapsedGameTime.TotalSeconds;\n    var walkSpeed = deltaSeconds * 128;\n    var keyboardState = Keyboard.GetState();\n    var animation = "idle";\n\n    if (keyboardState.IsKeyDown(Keys.W) || keyboardState.IsKeyDown(Keys.Up))\n    {\n        animation = "walkNorth";\n        _motwPosition.Y -= walkSpeed;\n    }\n\n    if (keyboardState.IsKeyDown(Keys.S) || keyboardState.IsKeyDown(Keys.Down))\n    {\n        animation = "walkSouth";\n        _motwPosition.Y += walkSpeed;\n    }\n\n    if (keyboardState.IsKeyDown(Keys.A) || keyboardState.IsKeyDown(Keys.Left))\n    {\n        animation = "walkWest";\n        _motwPosition.X -= walkSpeed;\n    }\n\n    if (keyboardState.IsKeyDown(Keys.D) || keyboardState.IsKeyDown(Keys.Right))\n    {\n        animation = "walkEast";\n        _motwPosition.X += walkSpeed;\n    }\n\n    _motwSprite.Play(animation);\n\n    if (keyboardState.IsKeyDown(Keys.R))\n        Camera.ZoomIn(deltaSeconds);\n\n    if (keyboardState.IsKeyDown(Keys.F))\n        Camera.ZoomOut(deltaSeconds);\n\n    _motwSprite.Update(deltaSeconds);\n\n\n    base.Update(gameTime);\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"drawing-the-final-result",children:"Drawing the final result"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"protected override void Draw(GameTime gameTime)\n{\n    GraphicsDevice.Clear(Color.CornflowerBlue);\n\n    _spriteBatch.Begin(samplerState: SamplerState.PointClamp);\n    _spriteBatch.Draw(_motwSprite, _motwPosition);\n    _spriteBatch.End();\n\n    base.Draw(gameTime);\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"result",children:"Result"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Animation",src:t(6103).A+"",width:"250",height:"250"})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},6407:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/files/assets-653f5eeb124faf919f77cce934a27f94.zip"},6103:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/animation-c3c981e748567e40ab46071308256ff9.gif"},4395:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/copy-if-newer-2b09ee55cd90eb71d6b017a8ca15d663.png"},1489:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/spritefactory-859a99488440adeb70b57c3f21b4c9ab.png"},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var i=t(6540);const a={},o=i.createContext(a);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);