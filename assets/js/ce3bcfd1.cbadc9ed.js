"use strict";(self.webpackChunkmonogame_extended_website=self.webpackChunkmonogame_extended_website||[]).push([[7962],{7659:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var o=t(4848),i=t(8453);const s={id:"gum-forms",sidebar_label:"Gum Forms",title:"Gum Forms",description:"An example document for gum"},r=void 0,l={id:"features/ui/gum/gum-forms/gum-forms",title:"Gum Forms",description:"An example document for gum",source:"@site/docs/features/ui/gum/gum-forms/gum-forms.md",sourceDirName:"features/ui/gum/gum-forms",slug:"/features/ui/gum/gum-forms/",permalink:"/docs/features/ui/gum/gum-forms/",draft:!1,unlisted:!1,editUrl:"https://github.com/craftworkgames/craftworkgames.github.io/tree/develop/docs/features/ui/gum/gum-forms/gum-forms.md",tags:[],version:"current",frontMatter:{id:"gum-forms",sidebar_label:"Gum Forms",title:"Gum Forms",description:"An example document for gum"},sidebar:"docs",previous:{title:"Object Pooling",permalink:"/docs/features/object-pooling/"},next:{title:"Collision",permalink:"/docs/features/collision/"}},a={},c=[{value:"Setup",id:"setup",level:2},{value:"Button",id:"button",level:2},{value:"CheckBox",id:"checkbox",level:2},{value:"ListBox",id:"listbox",level:2},{value:"Slider",id:"slider",level:2},{value:"TextBox",id:"textbox",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.admonition,{title:"Up to date",type:"tip",children:(0,o.jsxs)(n.p,{children:["This page is ",(0,o.jsx)(n.strong,{children:"up to date"})," for MonoGame.Extended ",(0,o.jsx)(n.code,{children:"4.0.3"}),".  If you find outdated information, ",(0,o.jsx)(n.a,{href:"https://github.com/craftworkgames/craftworkgames.github.io/issues",children:"please open an issue"}),"."]})}),"\n",(0,o.jsx)(n.p,{children:"Gum Forms provides a collection of flexible, fully customizable controls which can be added to your project with just a few lines of code."}),"\n",(0,o.jsx)(n.p,{children:"Gum includes a number of solutions for UI:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Gum Forms - a collection of controls such as Button, ListBox, and TextBox. These are typical elements which you might find in other UI libraries such as WPF or .NET MAUI."}),"\n",(0,o.jsx)(n.li,{children:"Gum Tool - WYSIWYG editor for creating UI. The Gum tool allows you to visually place both Gum Forms objects and non-interactive elements such as labels, sprites, and nine slices."}),"\n",(0,o.jsx)(n.li,{children:"Gum Runtime Library - A NuGet package which includes logic for loading Gum projects and interacting with objects in code."}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"You can use Gum with the Gum UI tool or code-only. Both approaches are fully supported."}),"\n",(0,o.jsxs)(n.p,{children:["This document provides setup and an introduction to using Gum forms controls purely in code. For full documentation see the ",(0,o.jsx)(n.a,{href:"https://docs.flatredball.com/gum/monogame/gum-forms",children:"Gum Forms documentation"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,o.jsxs)(n.p,{children:["Before using Gum, you must add the Gum.MonoGame ",(0,o.jsx)(n.a,{href:"https://www.nuget.org/packages/Gum.MonoGame",children:"nuget package"})," to your project."]}),"\n",(0,o.jsx)(n.p,{children:"Gum Forms uses the following objects for initialization, updating, and drawing:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"GumService - provides defaults, initialization, every-frame logic, and drawing for all forms objects."}),"\n",(0,o.jsx)(n.li,{children:"GraphicalUiElement - the base class for all Gum visual objects. The root is passed to GumService.Update so that it can perform every-frame logic on Forms objects, such as detecting clicks."}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"The following code shows a single Gum Forms button in an otherwise empty Game1 class:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cs",children:'public class Game1 : Game\n{\n    private GraphicsDeviceManager _graphics;\n\n    // Gum renders and updates using a hierarchy. At least\n    // one object must have its AddToManagers method called.\n    // If not loading from-file, then the easiest way to do this\n    // is to create a ContainerRuntime and add it to the managers.\n    ContainerRuntime Root;\n\n    public Game1()\n    {\n        _graphics = new GraphicsDeviceManager(this);\n        Content.RootDirectory = "Content";\n        // So we can interact with the UI\n        IsMouseVisible = true;\n    }\n\n    protected override void Initialize()\n    {\n        var gumProject = MonoGameGum.GumService.Default.Initialize(\n            this.GraphicsDevice);\n\n        Root = new ContainerRuntime();\n        Root.Width = 0;\n        Root.Height = 0;\n        Root.WidthUnits = Gum.DataTypes.DimensionUnitType.RelativeToContainer;\n        Root.HeightUnits = Gum.DataTypes.DimensionUnitType.RelativeToContainer;\n        Root.AddToManagers(SystemManagers.Default, null);\n\n\n        var button = new Button();\n        Root.Children.Add(button.Visual);\n        button.X = 50;\n        button.Y = 50;\n        button.Width = 200;\n        button.Height = 50;\n        button.Text = "Hello MonoGame.Extended!";\n        int clickCount = 0;\n        button.Click += (_, _) =>\n        {\n            clickCount++;\n            button.Text = $"Clicked {clickCount} times";\n        };\n        base.Initialize();\n    }\n\n    protected override void Update(GameTime gameTime)\n    {\n        MonoGameGum.GumService.Default.Update(this, gameTime, Root);\n        base.Update(gameTime);\n    }\n\n    protected override void Draw(GameTime gameTime)\n    {\n        GraphicsDevice.Clear(Color.CornflowerBlue);\n        MonoGameGum.GumService.Default.Draw();\n        base.Draw(gameTime);\n    }\n}\n\n'})}),"\n",(0,o.jsx)(n.p,{children:"The code above shows how to create a Button and add it to the Root object which controls the layout for all Gum objects. Any Gum Forms object can be added to the Root object."}),"\n",(0,o.jsx)(n.h2,{id:"button",children:"Button"}),"\n",(0,o.jsx)(n.p,{children:"The Button is a control providing an event for handling clicks. Button objects can also display Text to the user which can be modified through their Text property."}),"\n",(0,o.jsx)(n.p,{children:"The following code adds a button which increments every time it is clicked:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cs",children:'var button = new Button();\nRoot.Children.Add(button.Visual);\nbutton.X = 0;\nbutton.Y = 0;\nbutton.Width = 200;\nbutton.Height = 50;\nbutton.Text = "Hello MonoGame.Extended!";\nint clickCount = 0;\nbutton.Click += (_, _) =>\n{\n    clickCount++;\n    button.Text = $"Clicked {clickCount} times";\n};\n'})}),"\n",(0,o.jsx)(n.h2,{id:"checkbox",children:"CheckBox"}),"\n",(0,o.jsx)(n.p,{children:"The CheckBox control provides the ability to display a true/false state and allows the user to toggle the state through clicking."}),"\n",(0,o.jsx)(n.p,{children:"The following code creates a CheckBox which outputs text whenever it is checked and unchecked:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cs",children:'var checkBox = new CheckBox();\nRoot.Children.Add(checkBox.Visual);\ncheckBox.X = 50;\ncheckBox.Y = 50;\ncheckBox.Text = "Checkbox";\ncheckBox.Checked += (_,_) => Debug.WriteLine($"IsChecked:{checkBox.IsChecked}");\ncheckBox.Unchecked += (_, _) => Debug.WriteLine($"IsChecked:{checkBox.IsChecked}");\n'})}),"\n",(0,o.jsx)(n.h2,{id:"listbox",children:"ListBox"}),"\n",(0,o.jsx)(n.p,{children:"The ListBox control provides a scrollable list of ListBoxItems for displaying and selecting from a list."}),"\n",(0,o.jsxs)(n.p,{children:["The following code adds items to a ListBox when a button is clicked. When an item is added, ",(0,o.jsx)(n.code,{children:"ScrollIntoView"})," is called so the item is shown."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cs",children:'var listBox = new ListBox();\nthis.Root.Children.Add(listBox.Visual);\nlistBox.X = 50;\nlistBox.Y = 50;\nlistBox.Width = 400;\nlistBox.Height = 200;\n\nvar button = new Button();\nthis.Root.Children.Add(button.Visual);\nbutton.X = 50;\nbutton.Y = 270;\nbutton.Width = 200;\nbutton.Height = 40;\nbutton.Text = "Add to ListBox";\nbutton.Click += (s, e) =>\n{\n    var newItem = $"Item @ {DateTime.Now}";\n    listBox.Items.Add(newItem);\n    listBox.ScrollIntoView(newItem);\n};\n'})}),"\n",(0,o.jsx)(n.h2,{id:"slider",children:"Slider"}),"\n",(0,o.jsxs)(n.p,{children:["The Slider control provides a way for the user to change a value by dragging the slider ",(0,o.jsx)(n.em,{children:"thumb"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["The following code creates a Slider which allows the user to select a value between 0 and 30, inclusive.  The ",(0,o.jsx)(n.code,{children:"IsSnapToTickEnabled"})," property results in the value being snapped to the ",(0,o.jsx)(n.code,{children:"TickFrequency"})," value. In this case, the value is used to force whole numbers."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cs",children:'var slider = new Slider();\nthis.Root.Children.Add(slider.Visual);\nslider.X = 50;\nslider.Y = 50;\nslider.Minimum = 0;\nslider.Maximum = 30;\nslider.TicksFrequency = 1;\nslider.IsSnapToTickEnabled = true;\nslider.Width = 250;\nslider.ValueChanged += (_, _) => \n    Debug.WriteLine($"Value: {slider.Value}");\nslider.ValueChangeCompleted += (_, _) => \n    Debug.WriteLine($"Finished setting Value: {slider.Value}");\n'})}),"\n",(0,o.jsx)(n.h2,{id:"textbox",children:"TextBox"}),"\n",(0,o.jsx)(n.p,{children:"The TextBox control allows users to enter a string. It supports highlighting, copy/paste, selection with mouse and keyboard, and CTRL key for performing operations on entire words."}),"\n",(0,o.jsx)(n.p,{children:"The following code creates two TextBoxes which can be used to test copy/paste."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cs",children:'var textBox = new TextBox();\nthis.Root.Children.Add(textBox.Visual);\ntextBox.X = 50;\ntextBox.Y = 50;\ntextBox.Width = 200;\ntextBox.Height = 34;\ntextBox.Placeholder = "Placeholder Text...";\n\nvar textBox2 = new TextBox();\nthis.Root.Children.Add(textBox2.Visual);\ntextBox2.X = 50;\ntextBox2.Y = 90;\ntextBox2.Width = 200;\ntextBox2.Height = 34;\ntextBox2.Placeholder = "Placeholder Text...";\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var o=t(6540);const i={},s=o.createContext(i);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);