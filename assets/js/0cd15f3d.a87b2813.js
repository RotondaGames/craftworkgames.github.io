"use strict";(self.webpackChunkmonogame_extended_website=self.webpackChunkmonogame_extended_website||[]).push([[4113],{9888:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>s});var t=n(4848),i=n(8453);const a={id:"object-pooling",title:"Object Pooling",sidebar_label:"Object Pooling"},l=void 0,r={id:"features/object-pooling/object-pooling",title:"Object Pooling",description:"Object pooling is an optimization pattern. It's used to improve performance, in certain cases, by re-using objects instead of allocating memory for them on demand. In C/C++, one the things object pooling has to offer is a solution to avoid memory fragmentation. In C#, we don't have to worry about memory fragmentation thanks to garbage collection. However, garbage collection can be still be too expensive for certain parts of real-time applications, especially on mobile devices with slower CPUs and simpler garbage collectors. More details on object pooling here.",source:"@site/docs/features/object-pooling/object-pooling.md",sourceDirName:"features/object-pooling",slug:"/features/object-pooling/",permalink:"/docs/features/object-pooling/",draft:!1,unlisted:!1,editUrl:"https://github.com/craftworkgames/craftworkgames.github.io/tree/develop/docs/features/object-pooling/object-pooling.md",tags:[],version:"current",frontMatter:{id:"object-pooling",title:"Object Pooling",sidebar_label:"Object Pooling"}},c={},s=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Creating a Pool-able Object",id:"creating-a-pool-able-object",level:3},{value:"Creating a Pool",id:"creating-a-pool",level:3},{value:"Getting a Pooled Object",id:"getting-a-pooled-object",level:3},{value:"Returning a Object to the Pool",id:"returning-a-object-to-the-pool",level:3}];function d(e){const o={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(o.p,{children:["Object pooling is an optimization pattern. It's used to improve performance, in certain cases, by re-using objects instead of allocating memory for them on demand. In C/C++, one the things object pooling has to offer is a solution to avoid ",(0,t.jsx)(o.a,{href:"http://stackoverflow.com/questions/3770457/what-is-memory-fragmentation",children:"memory fragmentation"}),". In C#, we don't have to worry about memory fragmentation thanks to ",(0,t.jsx)(o.a,{href:"https://msdn.microsoft.com/en-us/library/ee787088",children:"garbage collection"}),". However, garbage collection can be still be too expensive for certain parts of real-time applications, especially on mobile devices with slower CPUs and simpler garbage collectors. ",(0,t.jsx)(o.a,{href:"http://gameprogrammingpatterns.com/object-pool.html",children:"More details on object pooling here"}),"."]}),"\n",(0,t.jsx)(o.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsxs)(o.p,{children:[(0,t.jsx)(o.code,{children:"ObjectPool"})," is available in the default ",(0,t.jsx)(o.code,{children:"MonoGame.Extended"})," library.\n",(0,t.jsx)(o.a,{href:"https://www.nuget.org/packages/MonoGame.Extended",children:"MonoGame.Extended"})," is distributed via a NuGet package. You can add the NuGet package to your C# project through your IDE of choice (Visual Studio, Xamarin Studio, Rider, etc) or through the Command Line Interface (CLI) using the dotnet command."]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{children:"dotnet add package MonoGame.Extended\n"})}),"\n",(0,t.jsx)(o.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(o.admonition,{type:"caution",children:(0,t.jsxs)(o.p,{children:["Always profile the game for performance problems!\nUsing a ",(0,t.jsx)(o.code,{children:"Pool<T>"})," without first profiling for the need of one may result in a ",(0,t.jsx)(o.em,{children:"decrease"})," in performance in certain cases. If you are unsure, don't use the object pooling pattern."]})}),"\n",(0,t.jsx)(o.h3,{id:"creating-a-pool-able-object",children:"Creating a Pool-able Object"}),"\n",(0,t.jsxs)(o.p,{children:["All objects which can be pooled need to implement the ",(0,t.jsx)(o.code,{children:"IPoolable"})," interface.\nThe following is a code snippet with comments demonstrating how to implement the interface."]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-cs",children:"class MyPoolable : IPoolable\n{\n    private ReturnToPoolDelegate _returnAction;\n\n    void IPoolable.Initialize(ReturnToPoolDelegate returnAction)\n    {\n        // copy the instance reference of the return function so we can call it later\n        _returnAction = returnAction;\n    }\n\n    public void Return()\n    {\n        // check if this instance has already been returned\n        if (_returnAction != null)\n        {\n            // not yet returned, return it now\n            _returnAction.Invoke(this);\n            // set the delegate instance reference to null, so we don't accidentally return it again\n            _returnAction = null;\n        }\n    }\n\n    public IPoolable NextNode { get; set; }\n    public IPoolable PreviousNode { get; set; }\n}\n"})}),"\n",(0,t.jsx)(o.h3,{id:"creating-a-pool",children:"Creating a Pool"}),"\n",(0,t.jsxs)(o.p,{children:["Instantiating a ",(0,t.jsx)(o.code,{children:"Pool<T>"})," is similar to any generic collection, i.e ",(0,t.jsx)(o.code,{children:"List<T>"}),", but ",(0,t.jsx)(o.code,{children:"T"})," has to implement ",(0,t.jsx)(o.code,{children:"IPoolable"}),"."]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-csharp",children:"var pool = new Pool<MyPoolable>(() => new MyPoolable());\n"})}),"\n",(0,t.jsx)(o.p,{children:"The parameter parameter is the delegate responsible for creating each object instance."}),"\n",(0,t.jsx)(o.admonition,{type:"note",children:(0,t.jsx)(o.p,{children:"Having too large of a capacity will waste memory, but having too small of a capacity will limit the number of object instances that can be pooled."})}),"\n",(0,t.jsx)(o.h3,{id:"getting-a-pooled-object",children:"Getting a Pooled Object"}),"\n",(0,t.jsx)(o.p,{children:"A free pooled object instance can be requested from the pool instance."}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-csharp",children:"var myPoolable = pool.Request();\n"})}),"\n",(0,t.jsx)(o.admonition,{type:"note",children:(0,t.jsxs)(o.p,{children:["If the pool is empty, the result will be ",(0,t.jsx)(o.code,{children:"null"}),"."]})}),"\n",(0,t.jsx)(o.h3,{id:"returning-a-object-to-the-pool",children:"Returning a Object to the Pool"}),"\n",(0,t.jsx)(o.p,{children:"When the object instance is no longer needed it should be returned to the pool so it can be re-used."}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-cs",children:"myPoolable.Return();\n"})})]})}function h(e={}){const{wrapper:o}={...(0,i.R)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,o,n)=>{n.d(o,{R:()=>l,x:()=>r});var t=n(6540);const i={},a=t.createContext(i);function l(e){const o=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function r(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(a.Provider,{value:o},e.children)}}}]);