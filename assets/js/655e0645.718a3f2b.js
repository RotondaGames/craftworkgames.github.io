"use strict";(self.webpackChunkmonogame_extended_website=self.webpackChunkmonogame_extended_website||[]).push([[5857],{10:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var t=a(4848),r=a(8453);const o={id:"screen-management",title:"Screen Management",sidebar_label:"Screen Management",description:"Screen management to split your game into multiple screens."},i=void 0,s={id:"features/screen-management/screen-management",title:"Screen Management",description:"Screen management to split your game into multiple screens.",source:"@site/docs/features/screen-management/screen-management.md",sourceDirName:"features/screen-management",slug:"/features/screen-management/",permalink:"/docs/features/screen-management/",draft:!1,unlisted:!1,editUrl:"https://github.com/craftworkgames/craftworkgames.github.io/tree/develop/docs/features/screen-management/screen-management.md",tags:[],version:"current",frontMatter:{id:"screen-management",title:"Screen Management",sidebar_label:"Screen Management",description:"Screen management to split your game into multiple screens."}},c={},d=[{value:"Usage",id:"usage",level:2},{value:"Screen 1",id:"screen-1",level:3},{value:"Screen 2",id:"screen-2",level:3}];function m(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.admonition,{title:"Not up to date",type:"warning",children:(0,t.jsxs)(n.p,{children:["This page ",(0,t.jsx)(n.strong,{children:"is not"})," up to date for MonoGame.Extended ",(0,t.jsx)(n.code,{children:"4.0.3"}),".  If you would like to contribute to updating this document, please ",(0,t.jsx)(n.a,{href:"https://github.com/craftworkgames/craftworkgames.github.io/pulls",children:"create a new PR"})]})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"ScreenManager"})," helps you to split your game into multiple ",(0,t.jsx)(n.code,{children:"GameScreens"})," with their own ",(0,t.jsx)(n.code,{children:"Dispose()"}),",\n",(0,t.jsx)(n.code,{children:"Initialize()"}),",\n",(0,t.jsx)(n.code,{children:"LoadContent()"}),",\n",(0,t.jsx)(n.code,{children:"UnloadContent()"}),",\n",(0,t.jsx)(n.code,{children:"Update(GameTime gameTime)"}),",\nand, ",(0,t.jsx)(n.code,{children:"Draw(GameTime gameTime)"})," methods."]}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsxs)(n.p,{children:["We start by including the ",(0,t.jsx)(n.code,{children:"Screens"})," and ",(0,t.jsx)(n.code,{children:"Transitions"})," namespaces."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",children:"using MonoGame.Extended.Screens;\nusing MonoGame.Extended.Screens.Transitions;\n"})}),"\n",(0,t.jsx)(n.p,{children:"Next, we implement our GameScreens.\nIn this example, we use 2 GameScreens with a sprite that follows the Cursor."}),"\n",(0,t.jsx)(n.h3,{id:"screen-1",children:"Screen 1"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",children:'public class MyScreen1 : GameScreen\n{\n    private new Game1 Game => (Game1) base.Game;\n    \n    private Texture2D _logo;\n    private SpriteFont _font;\n    private Vector2 _position = new Vector2(50,50);\n    public MyScreen1(Game1 game) : base(game) { }\n\n    public override void LoadContent()\n    {\n        base.LoadContent();\n        _font = Game.Content.Load<SpriteFont>("font");\n        _logo = Game.Content.Load<Texture2D>("logo-mge");\n    }\n\n    public override void Update(GameTime gameTime)\n    {\n        _position = Vector2.Lerp(_position, Mouse.GetState().Position.ToVector2(), 1f * gameTime.GetElapsedSeconds());\n    }\n\n    public override void Draw(GameTime gameTime)\n    {\n        Game.GraphicsDevice.Clear(new Color(16, 139, 204));\n        Game.SpriteBatch.Begin();\n        Game.SpriteBatch.DrawString(_font, nameof(MyScreen1), new Vector2(10,10), Color.White);\n        Game.SpriteBatch.Draw(_logo, _position, Color.White);\n        Game.SpriteBatch.End();\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"screen-2",children:"Screen 2"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",children:'public class MyScreen2 : GameScreen\n{\n    private new Game1 Game => (Game1)base.Game;\n    private Texture2D _logo;\n    private SpriteFont _font;\n    private Vector2 _position = new Vector2(50, 50);\n    \n    public MyScreen2(Game1 game) : base(game) { }\n\n    public override void LoadContent()\n    {\n        base.LoadContent();\n        _font = Game.Content.Load<SpriteFont>("font");\n        _logo = Game.Content.Load<Texture2D>("logo-mg");\n    }\n\n    public override void Update(GameTime gameTime)\n    {\n        _position = Vector2.Lerp(_position, Mouse.GetState().Position.ToVector2(), 1f * gameTime.GetElapsedSeconds());\n    }\n\n    public override void Draw(GameTime gameTime)\n    {\n        Game.GraphicsDevice.Clear(Color.White);\n        Game.SpriteBatch.Begin();\n        Game.SpriteBatch.DrawString(_font, nameof(MyScreen2), new Vector2(10, 10), Color.Orange);\n        Game.SpriteBatch.Draw(_logo, _position, Color.White);\n        Game.SpriteBatch.End();\n    }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Next, we define our ",(0,t.jsx)(n.code,{children:"ScreenManger"})," in our ",(0,t.jsx)(n.code,{children:"Game"})," class."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",children:"private readonly ScreenManager _screenManager;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Which we then assign and register as ",(0,t.jsx)(n.code,{children:"GameComponent"})," in the constructor."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",children:"_screenManager = new ScreenManager();\nComponents.Add(_screenManager);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Then we define the following methods to load the screens."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",children:"private void LoadScreen1()\n{\n    _screenManager.LoadScreen(new MyScreen1(this), new FadeTransition(GraphicsDevice, Color.Black));\n}\n\nprivate void LoadScreen2()\n{\n    _screenManager.LoadScreen(new MyScreen2(this), new FadeTransition(GraphicsDevice, Color.Black));\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Which we then call from the ",(0,t.jsx)(n.code,{children:"Initialize"})," and ",(0,t.jsx)(n.code,{children:"Update"})," methods."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",children:"protected override void Initialize()\n{\n    base.Initialize();\n    LoadScreen1();\n}\n\nprotected override void Update(GameTime gameTime)\n{\n    KeyboardState keyboardState = Keyboard.GetState();\n    if (keyboardState.IsKeyDown(Keys.Escape))\n        Exit();\n    if (keyboardState.IsKeyDown(Keys.D1))\n    {\n        LoadScreen1();\n    }\n    else if (keyboardState.IsKeyDown(Keys.D2))\n    {\n        LoadScreen2();\n    }\n    base.Update(gameTime);\n}\n"})})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>s});var t=a(6540);const r={},o=t.createContext(r);function i(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);