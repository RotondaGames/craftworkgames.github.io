"use strict";(self.webpackChunkmonogame_extended_website=self.webpackChunkmonogame_extended_website||[]).push([[9039],{6370:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var t=i(4848),o=i(8453);const a={id:"collision",sidebar_label:"Collision",title:"Collision",description:"2D grid-based collision system."},s=void 0,l={id:"features/collision/collision",title:"Collision",description:"2D grid-based collision system.",source:"@site/docs/features/collision/collision.md",sourceDirName:"features/collision",slug:"/features/collision/",permalink:"/docs/features/collision/",draft:!1,unlisted:!1,editUrl:"https://github.com/craftworkgames/craftworkgames.github.io/tree/develop/docs/features/collision/collision.md",tags:[],version:"current",frontMatter:{id:"collision",sidebar_label:"Collision",title:"Collision",description:"2D grid-based collision system."},sidebar:"docs",previous:{title:"Gum Forms",permalink:"/docs/features/ui/gum/gum-forms/"},next:{title:"ContentManager",permalink:"/docs/features/content-extensions/contentManager"}},r={},c=[{value:"Requirements",id:"requirements",level:2},{value:"ICollisionActor",id:"icollisionactor",level:3},{value:"CollisionComponent",id:"collisioncomponent",level:3},{value:"Full Example",id:"full-example",level:2},{value:"Setting up the game",id:"setting-up-the-game",level:3},{value:"Updating the game",id:"updating-the-game",level:3},{value:"Drawing the final result",id:"drawing-the-final-result",level:3},{value:"Result",id:"result",level:3},{value:"Advanced Topics (Optional)",id:"advanced-topics-optional",level:2},{value:"Space Algorithms",id:"space-algorithms",level:3},{value:"Space Algorithms: QuadTree",id:"space-algorithms-quadtree",level:4},{value:"Space Algorithms: SpatialHash",id:"space-algorithms-spatialhash",level:4},{value:"Layer",id:"layer",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.admonition,{title:"Up to date",type:"tip",children:(0,t.jsxs)(n.p,{children:["This page is ",(0,t.jsx)(n.strong,{children:"up to date"})," for MonoGame.Extended ",(0,t.jsx)(n.code,{children:"4.0.3"}),".  If you find outdated information, ",(0,t.jsx)(n.a,{href:"https://github.com/craftworkgames/craftworkgames.github.io/issues",children:"please open an issue"}),"."]})}),"\n",(0,t.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,t.jsx)(n.p,{children:"To use the Collision code, you need to perform the following 4 steps:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Create a class that implements the ",(0,t.jsx)(n.code,{children:"ICollisionActor"})," interface."]}),"\n",(0,t.jsxs)(n.li,{children:["Implement the ",(0,t.jsx)(n.code,{children:"OnCollision"})," method in the class created in step 1.  This defines what happens when something hits your object."]}),"\n",(0,t.jsxs)(n.li,{children:["Create an instance of ",(0,t.jsx)(n.code,{children:"CollisionComponent"})," which defines the bounds where collisions are checked."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Insert"})," an instance of your class into the CollisionComponent."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"icollisionactor",children:"ICollisionActor"}),"\n",(0,t.jsxs)(n.p,{children:["This is an interface you need to create a class from and implement the method and override the properties.  At minimum you need to implement ",(0,t.jsx)(n.code,{children:"OnCollision"})," and override ",(0,t.jsx)(n.code,{children:"Bounds"})," so you can provide the rectangle that is used to perform collision detection."]}),"\n",(0,t.jsxs)(n.p,{children:["In the below example, you can see that ",(0,t.jsx)(n.code,{children:"LayerName"})," overrides the interfaces implementation so we can state the layer this entity will belong to.  ",(0,t.jsx)(n.code,{children:"Layers"})," are discussed in the ",(0,t.jsx)(n.a,{href:"#advanced-topics-optional",children:"Advanced Topics"})," section at the bottom."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"OnCollision"})," method was implemented and simply reverses the direction of object by flipping it's velocity and moving it back the way it came."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public class MyEntity : ICollisionActor\n{\n    public Vector2 Velocity;\n\n    public MyEntity(RectangleF bounds, string layerName)\n    {\n        Bounds = bounds;\n        LayerName = layerName;\n    }\n\n    public IShapeF Bounds { get; set; }\n\n    public String LayerName { get; set; }\n\n    public void OnCollision(CollisionEventArgs collisionInfo)\n    {\n        Velocity.X *= -1;\n        Velocity.Y *= -1;\n        Bounds.Position -= collisionInfo.PenetrationVector;\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"collisioncomponent",children:"CollisionComponent"}),"\n",(0,t.jsxs)(n.p,{children:["This is the main driver that manages the collide-able entities.  This class passes the entities position updates down to the ",(0,t.jsx)(n.a,{href:"#space-algorithms",children:(0,t.jsx)(n.code,{children:"Space Algorithm"})}),".  Finally it does the collision checks between entities in layers.  All entities in each layer are always checked against the entities in the default layer."]}),"\n",(0,t.jsxs)(n.p,{children:["If you ",(0,t.jsx)(n.code,{children:"Insert"})," entities into the ",(0,t.jsx)(n.code,{children:"CollisionComponent"}),', it inserts them to a default layer, named appropriately "default".  ',(0,t.jsx)(n.code,{children:"CollisionComponent"})," uses a ",(0,t.jsx)(n.code,{children:"QuadTree"})," in the Default layer.  However if you create your own Layer, you can use a ",(0,t.jsx)(n.code,{children:"SpatialHash"})," instead."]}),"\n",(0,t.jsx)(n.p,{children:"This allows you to add layers where you don't want certain elements to interact with each-other by adding them to different layers.  For instance if your game has a water layer, ground layer, and sky layer.  Each of those would only compare objects against the default layer."}),"\n",(0,t.jsx)(n.p,{children:"Entities within the same layer are not compared against each-other, except the default layer."}),"\n",(0,t.jsx)(n.p,{children:"Comparisons are done:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"default"})," against ",(0,t.jsx)(n.code,{children:"default"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"default"})," against ",(0,t.jsx)(n.code,{children:"N layer"}),' (Where "N layer" is any layer added via ',(0,t.jsx)(n.code,{children:"CollisionComponent.Add"}),")"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:'Example creating a CollisionComponent and replacing the default layer with "ground":'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'// See Layers below under Advanced Topics for details on creating a Layer\nCollisionComponent collisionComponent = new CollisionComponent("ground", myQuadLayer); \n'})}),"\n",(0,t.jsx)(n.h2,{id:"full-example",children:"Full Example"}),"\n",(0,t.jsx)(n.p,{children:"In this example, we will make a simple sandbox where shapes can move and collide with each other."}),"\n",(0,t.jsxs)(n.p,{children:["We start by defining an ",(0,t.jsx)(n.code,{children:"IEntity"})," interface that inherits ",(0,t.jsx)(n.code,{children:"ICollisionActor"}),", so we can insert the entities into our ",(0,t.jsx)(n.code,{children:"CollisionComponent"}),".  This is optional, but has benefits."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public interface IEntity : ICollisionActor\n{\n    public void Update(GameTime gameTime);\n    public void Draw(SpriteBatch spriteBatch);\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Next, we define our entity classes"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"OnCollision"})," method and the Bounds property come from the ",(0,t.jsx)(n.code,{children:"ICollisionActor"})," interface. These will be called by the ",(0,t.jsx)(n.code,{children:"CollisionComponent"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public class CubeEntity : IEntity\n{\n    public Vector2 Velocity;\n    public IShapeF Bounds { get; }\n\n    public CubeEntity(RectangleF rectangleF)\n    {\n        Bounds = rectangleF;\n        RandomizeVelocity();\n    }\n\n    public virtual void Draw(SpriteBatch spriteBatch)\n    {\n        spriteBatch.DrawRectangle((RectangleF)Bounds, Color.Red, 3);\n    }\n\n    public virtual void Update(GameTime gameTime)\n    {\n        Bounds.Position += Velocity * gameTime.GetElapsedSeconds() * 50;\n    }\n\n    public void OnCollision(CollisionEventArgs collisionInfo)\n    {\n        Velocity.X *= -1;\n        Velocity.Y *= -1;\n        Bounds.Position -= collisionInfo.PenetrationVector;\n    }\n\n    private void RandomizeVelocity()\n    {\n        Velocity.X = Random.Shared.Next(-1, 2);\n        Velocity.Y = Random.Shared.Next(-1, 2);\n    }\n}\n\npublic class BallEntity : IEntity\n{\n    public Vector2 Velocity;\n    public IShapeF Bounds { get; }\n\n    public BallEntity(CircleF circleF)\n    {\n        Bounds = circleF;\n        RandomizeVelocity();\n    }\n\n    public void Draw(SpriteBatch spriteBatch)\n    {\n        spriteBatch.DrawCircle((CircleF)Bounds, 8, Color.Red, 3f);\n    }\n\n    public void Update(GameTime gameTime)\n    {\n        Bounds.Position += Velocity * gameTime.GetElapsedSeconds() * 30;\n    }\n\n    public void OnCollision(CollisionEventArgs collisionInfo)\n    {\n        RandomizeVelocity();\n        Bounds.Position -= collisionInfo.PenetrationVector;\n    }\n\n\n    private void RandomizeVelocity()\n    {\n        Velocity.X = Random.Shared.Next(-1, 2);\n        Velocity.Y = Random.Shared.Next(-1, 2);\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"setting-up-the-game",children:"Setting up the game"}),"\n",(0,t.jsx)(n.p,{children:"First, we define our properties and fields"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"private readonly List<IEntity> _entities = new List<IEntity>();\nprivate readonly CollisionComponent _collisionComponent;\nconst int MapWidth = 500;\nconst int MapHeight = 500;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Then we Initialize our game by creating entities and adding them to the ",(0,t.jsx)(n.code,{children:"CollisionComponent"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'\npublic Game1()\n{\n    _graphics = new GraphicsDeviceManager(this);\n    _collisionComponent = new CollisionComponent(new RectangleF(0,0, MapWidth, MapHeight));\n\n    Content.RootDirectory = "Content";\n    IsMouseVisible = true;\n}\n\nprotected override void Initialize()\n{\n    base.Initialize();\n    _graphics.PreferredBackBufferHeight = MapHeight;\n    _graphics.PreferredBackBufferWidth = MapWidth;\n    _graphics.ApplyChanges();\n\n    // Create some objects to use in the collision demo\n    for (var i = 0; i < 50; i++)\n    {\n        var size = Random.Shared.Next(20, 40);\n        var position = new Vector2(Random.Shared.Next(-MapWidth, MapWidth * 2), Random.Shared.Next(0, MapHeight));\n        if (i % 2 == 0)\n        {\n            _entities.Add(new BallEntity(new CircleF(position, size)));\n        }\n        else\n        {\n            _entities.Add(new CubeEntity(new RectangleF(position, new SizeF(size, size))));\n        }\n    }\n\n    // Add those objects to the collisionComponent so it will do the collision checking for us\n    foreach (IEntity entity in _entities)\n    {\n        _collisionComponent.Insert(entity);\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"updating-the-game",children:"Updating the game"}),"\n",(0,t.jsxs)(n.p,{children:["In the ",(0,t.jsx)(n.code,{children:"Update"})," method, we update all entities and the ",(0,t.jsx)(n.code,{children:"CollisionComponent"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"protected override void Update(GameTime gameTime)\n{\n    // Make sure each entity moves around the screen\n    foreach (IEntity entity in _entities)\n    {\n        entity.Update(gameTime);\n    }\n\n    // Make sure all collisions are detected and the OnCollision event for each is called\n    _collisionComponent.Update(gameTime);\n\n    base.Update(gameTime);\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"drawing-the-final-result",children:"Drawing the final result"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"protected override void Draw(GameTime gameTime)\n{\n    GraphicsDevice.Clear(Color.CornflowerBlue);\n\n    // Draw all the entities\n    _spriteBatch.Begin();\n    foreach (IEntity entity in _entities)\n    {\n        entity.Draw(_spriteBatch);\n    }\n\n    _spriteBatch.End();\n\n    base.Draw(gameTime);\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"result",children:"Result"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"collision",src:i(7906).A+"",width:"400",height:"400"})}),"\n",(0,t.jsx)(n.h2,{id:"advanced-topics-optional",children:"Advanced Topics (Optional)"}),"\n",(0,t.jsx)(n.h3,{id:"space-algorithms",children:"Space Algorithms"}),"\n",(0,t.jsx)(n.p,{children:"Currently there are 2 Space Algorithms implemented:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"QuadTree"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"SpatialHash"})}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"space-algorithms-quadtree",children:"Space Algorithms: QuadTree"}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"QuadTree"})," is a data structure that starts off with a single rectangular area.  Entities are added, and if they reach the maximum number for that rectangular area (25 by default), the area is split up into 4 equal size parts or Quadrants.  This can continue until the maximum depth is reached (7 by default)."]}),"\n",(0,t.jsx)(n.p,{children:"The benefit is that you reduce the number of entities you have to check collisions on, since you keep partitioning the screen into smaller and smaller sets of entities."}),"\n",(0,t.jsxs)(n.p,{children:["The management class is ",(0,t.jsx)(n.code,{children:"QuadTreeSpace"})," which uses the ",(0,t.jsx)(n.code,{children:"QuadTree"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Example creation of a QuadTreeSpace:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"QuadTreeSpace quadTreeSpace = new QuadTreeSpace(new RectangleF(x, y, width, height));\n"})}),"\n",(0,t.jsxs)(n.p,{children:["See ",(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Quadtree",children:"QuadTrees"})," on Wikipedia for generic more information."]}),"\n",(0,t.jsx)(n.h4,{id:"space-algorithms-spatialhash",children:"Space Algorithms: SpatialHash"}),"\n",(0,t.jsx)(n.p,{children:"Think of mipmaps or approximations.  The screen is split up into N sections, and the object is either in that large section or not."}),"\n",(0,t.jsx)(n.p,{children:"Example creation of a SpatialHash:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"SpatialHash shash = new SpatialHash(new Vector2(32, 32));\n"})}),"\n",(0,t.jsxs)(n.p,{children:["See ",(0,t.jsx)(n.a,{href:"https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/spatial-hashing-r2697/",children:"Spatial Hashing"})," on GameDev."]}),"\n",(0,t.jsx)(n.h3,{id:"layer",children:"Layer"}),"\n",(0,t.jsxs)(n.p,{children:["You can create a Layer and ",(0,t.jsx)(n.code,{children:"Insert"}),' "entities" (Instances of classes that extend ',(0,t.jsx)(n.code,{children:"ICollisionAgent"}),").  Once you've added the entities, you can ",(0,t.jsx)(n.code,{children:"Add"})," the Layer into a ",(0,t.jsx)(n.code,{children:"CollisionComponent"}),".  Additionally, you may also add the layer without entities, so long as in your ",(0,t.jsx)(n.code,{children:"ICollisionAgent"})," class you override the ",(0,t.jsx)(n.code,{children:"LayerName"})," property so you can modify it to match the name of the layer you pass into the ",(0,t.jsx)(n.code,{children:"CollisionComponent"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"QuadTreeSpace quadTreeSpace = new QuadTreeSpace(new RectangleF(x, y, width, height));\nLayer myQuadLayer = new Layer(quadTreeSpace);\n// or\nSpatialHash shash = new SpatialHash(new Vector2(32, 32));\nLayer mySHashLayer = new Layer(shash);\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},7906:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/collision-78e68549d7bdcb5ca12061cd5761cb3a.gif"},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>l});var t=i(6540);const o={},a=t.createContext(o);function s(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);