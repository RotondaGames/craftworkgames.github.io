"use strict";(self.webpackChunkmonogame_extended_website=self.webpackChunkmonogame_extended_website||[]).push([[5297],{3354:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var r=t(4848),a=t(8453);const s={id:"contentManager-extensions",title:"ContentManager extensions",sidebar_label:"ContentManager extensions"},i="ContentManager extensions",o={id:"features/contentManager-extensions/contentManager-extensions",title:"ContentManager extensions",description:"ContentManager.OpenStream",source:"@site/docs/features/contentManager-extensions/contentManager-extensions.md",sourceDirName:"features/contentManager-extensions",slug:"/features/contentManager-extensions/",permalink:"/docs/features/contentManager-extensions/",draft:!1,unlisted:!1,editUrl:"https://github.com/craftworkgames/craftworkgames.github.io/tree/develop/docs/features/contentManager-extensions/contentManager-extensions.md",tags:[],version:"current",frontMatter:{id:"contentManager-extensions",title:"ContentManager extensions",sidebar_label:"ContentManager extensions"},sidebar:"docs",previous:{title:"Collision",permalink:"/docs/features/collision/"},next:{title:"Serialization",permalink:"/docs/features/serialization/"}},c={},d=[{value:"ContentManager.OpenStream",id:"contentmanageropenstream",level:2},{value:"ContentManager.GetGraphicsDevice",id:"contentmanagergetgraphicsdevice",level:2},{value:"ContentReader.GetGraphicsDevice",id:"contentreadergetgraphicsdevice",level:2},{value:"ContentReader.GetRelativeAssetName",id:"contentreadergetrelativeassetname",level:2}];function l(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"contentmanager-extensions",children:"ContentManager extensions"}),"\n",(0,r.jsx)(n.h2,{id:"contentmanageropenstream",children:"ContentManager.OpenStream"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"System.IO.Stream ContentManager.OpenStream(string filename)"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"OpenStream"})," allows easy access to ",(0,r.jsx)(n.code,{children:"TitleContainer.OpenStream"})," so you can use the ",(0,r.jsx)(n.code,{children:"Game.Content"})," object to load compiled resources ",(0,r.jsx)(n.em,{children:"and"})," included resources."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'// my-file.txt is in the RootDirectory\nvar stream = Content.OpenStream("my-file.txt");\n// do something with file\nstream.Close();\n'})}),"\n",(0,r.jsx)(n.h2,{id:"contentmanagergetgraphicsdevice",children:"ContentManager.GetGraphicsDevice"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"GraphicsDevice ContentManager.GetGraphicsDevice()"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"GetGraphicsDevice"})," returns the current ",(0,r.jsx)(n.code,{children:"GraphicsDevice"})," from the services."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"var graphicsDevice = Content.GetGraphicsDevice();\nvar width = graphicsDevice.DisplayMode.Width;\n"})}),"\n",(0,r.jsx)(n.h1,{id:"contentreader-extensions",children:"ContentReader extensions"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"ContentReader"})," extensions help when writing your own content pipeline readers."]}),"\n",(0,r.jsx)(n.h2,{id:"contentreadergetgraphicsdevice",children:"ContentReader.GetGraphicsDevice"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"GraphicsDevice ContentManager.GetGraphicsDevice()"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"GetGraphicsDevice"})," returns the current ",(0,r.jsx)(n.code,{children:"GraphicsDevice"})," to help when loading content for the current display."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class MyTypeReader : ContentTypeReader<MyType> \n{\n    protected override MyType Read(ContentReader reader, MyType existingInstance)\n    {\n        var graphicsDevice = reader.GetGraphicsDevice();\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"contentreadergetrelativeassetname",children:"ContentReader.GetRelativeAssetName"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"string ContentReader.GetRelativeAssetName(string relativeName)"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"GetRelativeAssetName"})," helps when your content type loads a different type, and you want to know the name to give ",(0,r.jsx)(n.code,{children:"ContentManager.Load"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class MyTypeReader : ContentTypeReader<MyType> \n{\n    protected override MyType Read(ContentReader reader, MyType existingInstance)\n    {\n        var assetName = reader.GetRelativeAssetName(reader.ReadString());\n        var other = reader.ContentManager.Load<OtherType>(assetName);\n    }\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var r=t(6540);const a={},s=r.createContext(a);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);