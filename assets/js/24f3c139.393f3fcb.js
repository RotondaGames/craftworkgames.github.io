"use strict";(self.webpackChunkmonogame_extended_website=self.webpackChunkmonogame_extended_website||[]).push([[9444],{7554:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var t=i(4848),a=i(8453);const r={id:"tiled",title:"Tiled",sidebar_label:"Tiled"},d="Tiled",o={id:"features/tiled/tiled",title:"Tiled",description:"Tiled Logo",source:"@site/docs/features/tiled/tiled.md",sourceDirName:"features/tiled",slug:"/features/tiled/",permalink:"/docs/features/tiled/",draft:!1,unlisted:!1,editUrl:"https://github.com/craftworkgames/craftworkgames.github.io/tree/develop/docs/features/tiled/tiled.md",tags:[],version:"current",frontMatter:{id:"tiled",title:"Tiled",sidebar_label:"Tiled"}},s={},c=[{value:"Installation",id:"installation",level:2},{value:"Content Pipeline",id:"content-pipeline",level:3},{value:"NuGet",id:"nuget",level:3},{value:"Usage",id:"usage",level:2},{value:"Adding a Camera",id:"adding-a-camera",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://www.mapeditor.org/",children:(0,t.jsx)(n.img,{alt:"Tiled Logo",src:i(1261).A+"",width:"419",height:"228"})})}),"\n",(0,t.jsx)(n.h1,{id:"tiled",children:"Tiled"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"MonoGame.Extended.Tiled"})," library allows you to load and render maps files (",(0,t.jsx)(n.code,{children:".tmx"}),") created with the ",(0,t.jsx)(n.a,{href:"http://www.mapeditor.org/",children:"Tiled Map Editor"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.h3,{id:"content-pipeline",children:"Content Pipeline"}),"\n",(0,t.jsxs)(n.p,{children:["To load a Tiled map you first to compile it using the Content Pipeline. If you have not setup the Content Pipeline with ",(0,t.jsx)(n.code,{children:"MonoGame.Extended"})," yet see the instructions on how to install the Content Pipeline in the ",(0,t.jsx)(n.a,{href:"/docs/getting-started/installation-monogame",children:"getting started section"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"nuget",children:"NuGet"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://www.nuget.org/packages/MonoGame.Extended.Tiled/",children:"MonoGame.Extended.Tiled"})," is distributed via a NuGet package. You can add the NuGet package to your C# project through your IDE of choice (Visual Studio, Xamarin Studio, Rider, etc) or through the Command Line Interface (CLI) using the dotnet command."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"dotnet add package MonoGame.Extended.Tiled\n"})}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["The assets used in this example can be downloaded ",(0,t.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:i(3906).A+"",children:"here"})]})}),"\n",(0,t.jsxs)(n.p,{children:["We start by including the ",(0,t.jsx)(n.code,{children:"Tiled"})," namespaces."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",children:"using MonoGame.Extended.Tiled;\nusing MonoGame.Extended.Tiled.Renderers;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Next, we define our ",(0,t.jsx)(n.code,{children:"Tiledmap"})," and ",(0,t.jsx)(n.code,{children:"TiledMapRenderer"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",children:"TiledMap _tiledMap;\nTiledMapRenderer _tiledMapRenderer;\n"})}),"\n",(0,t.jsx)(n.p,{children:"Which we then initialize in the LoadContent function."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",children:'protected override void LoadContent()\n{\n    _tiledMap = Content.Load<TiledMap>("samplemap");\n    _tiledMapRenderer = new TiledMapRenderer(GraphicsDevice, _tiledMap);\n\n    _spriteBatch = new SpriteBatch(GraphicsDevice);\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Finally we render and update the map by calling ",(0,t.jsx)(n.code,{children:"mapRenderer.Update()"})," and ",(0,t.jsx)(n.code,{children:"mapRenderer.Draw()"})," respectively."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",children:"protected override void Update(GameTime gameTime)\n{\n    _tiledMapRenderer.Update(gameTime);\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",children:"protected override void Draw(GameTime gameTime)\n{\n    GraphicsDevice.Clear(Color.Black);\n    \n    _tiledMapRenderer.Draw();\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"adding-a-camera",children:"Adding a Camera"}),"\n",(0,t.jsxs)(n.p,{children:["The game now renders the ",(0,t.jsx)(n.code,{children:"TiledMap"}),". The next step is to navigate through the map with a ",(0,t.jsx)(n.code,{children:"Camera"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["We start by including the ",(0,t.jsx)(n.code,{children:"Camera"})," namespaces."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",children:"using MonoGame.Extended;\nusing MonoGame.Extended.ViewportAdapters;\n"})}),"\n",(0,t.jsx)(n.p,{children:"Next, we define our Camera"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",children:"private OrthographicCamera _camera;\n"})}),"\n",(0,t.jsx)(n.p,{children:"Which we then initialize in the Initialize function."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",children:"protected override void Initialize()\n{\n    var viewportadapter = new BoxingViewportAdapter(Window, GraphicsDevice, 800, 600);\n    _camera = new OrthographicCamera(viewportadapter);\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"We need to tell the Camera where to look. To do this, we declare the following field."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",children:"private Vector2 _cameraPosition;\n"})}),"\n",(0,t.jsx)(n.p,{children:"We update this field with the following function."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",children:"private Vector2 GetMovementDirection()\n{\n    var movementDirection = Vector2.Zero;\n    var state = Keyboard.GetState();\n    if (state.IsKeyDown(Keys.Down))\n    {\n        movementDirection += Vector2.UnitY;\n    }\n    if (state.IsKeyDown(Keys.Up))\n    {\n        movementDirection -= Vector2.UnitY;\n    }\n    if (state.IsKeyDown(Keys.Left))\n    {\n        movementDirection -= Vector2.UnitX;\n    }\n    if (state.IsKeyDown(Keys.Right))\n    {\n        movementDirection += Vector2.UnitX;\n    }\n    \n    // Can't normalize the zero vector so test for it before normalizing\n    if (movementDirection != Vector2.Zero)\n    {\n        movementDirection.Normalize(); \n    }\n    \n    return movementDirection;\n}\n\nprivate void MoveCamera(GameTime gameTime)\n{\n    var speed = 200;\n    var seconds = gameTime.GetElapsedSeconds();\n    var movementDirection = GetMovementDirection();\n    _cameraPosition += speed * movementDirection * seconds;\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Which we then use in the ",(0,t.jsx)(n.code,{children:"Update"})," function."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",children:"protected override void Update(GameTime gameTime)\n{\n    _tiledMapRenderer.Update(gameTime);\n\n    MoveCamera(gameTime);\n    _camera.LookAt(_cameraPosition);\n\n    base.Update(gameTime);\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["To render the map with our ",(0,t.jsx)(n.code,{children:"Camera"}),", we call the Draw function with the Camera's ",(0,t.jsx)(n.code,{children:"ViewMatrix"})," as follows."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",children:"protected override void Draw(GameTime gameTime)\n{\n    GraphicsDevice.Clear(Color.Black);\n\n    _tiledMapRenderer.Draw(_camera.GetViewMatrix());\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},3906:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/files/assets-6a3b3a06d9df585805d29f6f45628bcd.zip"},1261:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/tiled-logo-15cece4c4c24263ef65eb0399df18c10.png"},8453:(e,n,i)=>{i.d(n,{R:()=>d,x:()=>o});var t=i(6540);const a={},r=t.createContext(a);function d(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:d(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);